
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\examples_epicimpoc\plot_epicimpoc_spectrum.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_examples_epicimpoc_plot_epicimpoc_spectrum.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_examples_epicimpoc_plot_epicimpoc_spectrum.py:


Visualization - spectrum
----------------------------

The example below loads a portion of the culture dataset and creates the 
pipeline to remove outliers, imput missing data, address the class imbalance 
and scale the data features accordingly. After this, a number of estimators 
are trained and tested (see wrappers and grids). The results such as the
estimators (pickle) and metrics (csv) re stored in the specified path.

@see core
@see xxx

.. GENERATED FROM PYTHON SOURCE LINES 14-221



.. image:: /_examples/examples_epicimpoc/images/sphx_glr_plot_epicimpoc_spectrum_001.png
    :alt: plot epicimpoc spectrum
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Loading files...['2009.csv', '2010.csv', '2011.csv', '2012.csv', '2013.csv', '2014.csv', '2015.csv', '2016.csv']


    Data input:
      antibioticCode organismCode dateReceived sensitivity
    0           AAMO         ENTC   2009-03-01   sensitive
    1           AAUG         ENTC   2009-03-01   sensitive
    2          ACELX         ENTC   2009-03-01   resistant
    3           ACIP         ENTC   2009-03-01   resistant
    4           ANIT         ENTC   2009-03-01   sensitive
    5           ATEI         ENTC   2009-03-01   sensitive
    6           ATRI         ENTC   2009-03-01   resistant
    7           AVAN         ENTC   2009-03-01   sensitive
    8           ACHL        COLIF   2009-03-01   resistant
    9           AGEN        COLIF   2009-03-01   sensitive


    Data ASAI:
               N_GENUS      N_SPECIE       ASAI_SCORE        
    gram             n    p        n     p          n       p
    ANTIBIOTIC                                               
    AAMI           8.0  1.0     19.0   1.0     0.8646  1.0000
    AAMO           9.0  3.0     14.0   9.0     0.2222  0.8889
    AAMPC          5.0  NaN     11.0   NaN     0.2000     NaN
    AAUG           8.0  4.0     15.0   7.0     0.2917  0.9167
    AAZI           2.0  NaN      3.0   NaN     1.0000     NaN
    AAZT           7.0  NaN     16.0   NaN     0.5238     NaN
    ABAC           NaN  2.0      NaN   3.0        NaN  1.0000
    ACAZ           8.0  1.0     19.0   1.0     0.6354  0.0000
    ACELX          6.0  3.0     10.0   5.0     0.2222  0.6667
    ACHL           8.0  5.0     13.0  10.0     0.8125  1.0000






|

.. code-block:: default
   :lineno-start: 15


    # Import libraries
    import sys
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import specific libraries
    from pyamr.datasets import load
    from pyamr.core.freq import Frequency
    from pyamr.core.sari import SARI
    from pyamr.core.asai import ASAI


    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)


    # -------------------------
    # load suspcetibility data
    # -------------------------
    # Load data
    data = load.dataset_epicimpoc_susceptibility(nrows=10000)

    # Filter data
    # Keep only relevant columns
    data = data[['antibioticCode',
                 'organismCode',
                 'dateReceived',
                 'sensitivity']]

    # Filter for two examples
    #is_org = data['organismCode']=='ECOL'
    #is_abx = data['antibioticCode'].isin(['ATAZ', 'AMER'])
    #data = data[is_abx & is_org]

    # Show
    print("\n\nData input:")
    print(data.head(10))

    # --------------------
    # compute frequencies
    # --------------------
    # Create instance
    freq = Frequency(column_antibiotic='antibioticCode',
                     column_organism='organismCode',
                     column_date='dateReceived',
                     column_outcome='sensitivity')

    # Compute frequencies overall
    freq_overall = freq.compute(data, strategy='overall', 
                                      by_category='pairs')

    # ------------------------
    # compute resistance index
    # ------------------------
    sari_overall = SARI(strategy='medium').compute(freq_overall)


    # ------------------------
    # format dataframe
    # ------------------------

    def create_mapper(dataframe, column_key, column_value):
      """This method constructs a mapper

      Parameters
      ----------
      dataframe: dataframe-like
        The dataframe from which the columns are extracted

      column_key: string-like
        The name of the column with the values for the keys of the mapper

      column_value: string-like
        The name of the column with the values for the values of the mapper

      Returns
      -------
      dictionary
      """
      dataframe = dataframe[[column_key, column_value]]
      dataframe = dataframe.drop_duplicates()
      return dict(zip(dataframe[column_key], dataframe[column_value]))

    # Load datasets
    antibiotics = load.dataset_epicimpoc_antibiotics()
    organisms = load.dataset_epicimpoc_organisms()

    # Create mappers
    abx_map = create_mapper(antibiotics, 'antibioticCode', 'antibioticClass')
    org_map = create_mapper(organisms, 'organismCode', 'specieName')
    grm_map = create_mapper(organisms, 'organismCode', 'gramType')


    # Copy dataframe
    dataframe = sari_overall.copy(deep=True)
    dataframe = dataframe.reset_index()

    # Include categories
    dataframe['category'] = dataframe['ANTIBIOTIC'].map(abx_map)
    dataframe['genus'] = dataframe['SPECIE'].map(org_map)
    dataframe['gram'] = dataframe['SPECIE'].map(grm_map)

    # ------------------------
    # compute spectrum index
    # ------------------------
    # Create antimicrobial spectrum of activity instance
    asai = ASAI(weights='uniform', threshold=0.05,
                                   column_genus='genus',
                                   column_specie='SPECIE',
                                   column_antibiotic='ANTIBIOTIC',
                                   column_resistance='sari')

    # Compute
    scores = asai.compute(dataframe, by_category='gram')

    # Show scores
    print("\n\nData ASAI:")
    print(scores.head(10))

    # ---------------------------------------
    # plot
    # ---------------------------------------
    def scalar_colormap(values, cmap, vmin, vmax):
       """This method creates a colormap based on values.

       Parameters
       ----------
       values : array-like
         The values to create the corresponding colors

       cmap : str
         The colormap

       vmin, vmax : float
         The minimum and maximum possible values

       Returns
       -------
       scalar colormap
       """
       # Create scalar mappable
       norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax, clip=True)
       mapper = mpl.cm.ScalarMappable(norm=norm, cmap=cmap)
       # Gete color map
       colormap = sns.color_palette([mapper.to_rgba(i) for i in values])
       # Return
       return colormap


    # Sort
    scores = scores.fillna(0.0)
    scores['width'] = np.abs(scores['ASAI_SCORE']['n']+scores['ASAI_SCORE']['p'])
    scores['gmean'] = np.sqrt(scores['ASAI_SCORE']['n']*scores['ASAI_SCORE']['p'])
    scores = scores.sort_values(by='gmean', ascending=False)

    # Variables to plot.
    x = scores.index.values
    y_n = scores['ASAI_SCORE']['n'].values
    y_p = scores['ASAI_SCORE']['p'].values

    # Constants
    colormap_p = scalar_colormap(y_p, cmap='Blues', vmin=-0.1, vmax=1.1)
    colormap_n = scalar_colormap(y_n, cmap='Reds', vmin=-0.1, vmax=1.1)

    # ----------
    # Example
    # ----------
    # This example shows a diverging figure using exclusively the gram-positive
    # and gram-negative categories. Note that the gram negative categories has
    # values in the range [-1,0] while the gram-positive category has values
    # within the range [0, 1]
    # Create figure
    f, ax = plt.subplots(1, 1, figsize=(3, 9))

    # Plot
    sns.barplot(x=y_p, y=x, palette=colormap_p, ax=ax, orient='h',
     saturation=0.5, label='Gram-positive')
    sns.barplot(x=-y_n, y=x, palette=colormap_n, ax=ax, orient='h',
     saturation=0.5, label='Gram-negative')

    # Configure
    sns.despine(bottom=True)

    # Show legend.
    plt.legend(loc=8)
    plt.subplots_adjust(left=0.4, right=0.9, bottom=0.05, top=0.98)

    # Show
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.485 seconds)


.. _sphx_glr_download__examples_examples_epicimpoc_plot_epicimpoc_spectrum.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_epicimpoc_spectrum.py <plot_epicimpoc_spectrum.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_epicimpoc_spectrum.ipynb <plot_epicimpoc_spectrum.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
