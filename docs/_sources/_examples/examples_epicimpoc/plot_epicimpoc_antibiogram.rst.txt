
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\examples_epicimpoc\plot_epicimpoc_antibiogram.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_examples_epicimpoc_plot_epicimpoc_antibiogram.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_examples_epicimpoc_plot_epicimpoc_antibiogram.py:


Visualization - antibiogram
----------------------------

The example below loads a portion of the culture dataset and creates the 
pipeline to remove outliers, imput missing data, address the class imbalance 
and scale the data features accordingly. After this, a number of estimators 
are trained and tested (see wrappers and grids). The results such as the
estimators (pickle) and metrics (csv) re stored in the specified path.

@see core
@see xxx

.. GENERATED FROM PYTHON SOURCE LINES 14-167



.. image:: /_examples/examples_epicimpoc/images/sphx_glr_plot_epicimpoc_antibiogram_001.png
    :alt: Antibiogram (euclidean, weighted)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Loading files...['2009.csv', '2010.csv', '2011.csv', '2012.csv', '2013.csv', '2014.csv', '2015.csv', '2016.csv']


    Data input:
      antibioticCode organismCode dateReceived sensitivity orderCode
    0           AAMO         ENTC   2009-03-01   sensitive    URICUL
    1           AAUG         ENTC   2009-03-01   sensitive    URICUL
    2          ACELX         ENTC   2009-03-01   resistant    URICUL
    3           ACIP         ENTC   2009-03-01   resistant    URICUL
    4           ANIT         ENTC   2009-03-01   sensitive    URICUL
    5           ATEI         ENTC   2009-03-01   sensitive    URICUL
    6           ATRI         ENTC   2009-03-01   resistant    URICUL
    7           AVAN         ENTC   2009-03-01   sensitive    URICUL
    8           ACHL        COLIF   2009-03-01   resistant    ENTCUL
    9           AGEN        COLIF   2009-03-01   sensitive    ENTCUL


    Data antibiogram:
    SENSITIVITY SPECIE ANTIBIOTIC  <<do not report>>  highly resistant  intermediate  not done  resistant  sensitive    sari          category          genus
    0             ABAU       AAMI                0.0               0.0           0.0       0.0        1.0       16.0  0.0588   aminoglycosides  acinetobacter
    1             ABAU       AAMO                0.0               0.0           0.0       0.0        8.0        2.0  0.8000  aminopenicillins  acinetobacter
    2             ABAU      AAMPC                0.0               0.0           0.0       0.0        3.0        2.0  0.6000               NaN  acinetobacter
    3             ABAU       AAUG                0.0               0.0           0.0       0.0        2.0        9.0  0.1818               NaN  acinetobacter
    4             ABAU       AAZT                0.0               0.0           1.0       0.0        6.0        0.0  1.0000       monobactams  acinetobacter
    5             ABAU       ABAC                0.0               0.0           0.0       0.0        0.0        1.0  0.0000      polypeptides  acinetobacter
    6             ABAU       ACAZ                0.0               0.0           1.0       0.0        8.0        2.0  0.8000    cephalosporins  acinetobacter
    7             ABAU      ACELX                0.0               0.0           0.0       0.0        1.0        0.0  1.0000    cephalosporins  acinetobacter
    8             ABAU       ACHL                0.0               0.0           0.0       0.0        1.0        0.0  1.0000               NaN  acinetobacter
    9             ABAU       ACIP                0.0               0.0           0.0       0.0        3.0       16.0  0.1579  fluoroquinolones  acinetobacter






|

.. code-block:: default
   :lineno-start: 15


    # Import libraries
    import sys
    import warnings
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import specific libraries
    from pyamr.datasets import load
    from pyamr.core.freq import Frequency
    from pyamr.core.sari import SARI
    from pyamr.core.asai import ASAI
    from pyamr.core.table.acronym import AcronymBuilder
    from pyamr.graphics.antibiogram import Antibiogram

    # Ignore warnings
    warnings.simplefilter('ignore')

    # Configure seaborn style (context=talk)
    sns.set(style="white")

    # Set matplotlib
    mpl.rcParams['xtick.labelsize'] = 9
    mpl.rcParams['ytick.labelsize'] = 9
    mpl.rcParams['axes.titlesize'] = 11
    mpl.rcParams['legend.fontsize'] = 9

    # Pandas configuration
    pd.set_option('display.max_colwidth', 40)
    pd.set_option('display.width', 300)
    pd.set_option('display.precision', 4)

    # Numpy configuration
    np.set_printoptions(precision=2)


    # -------------------------
    # load susceptibility data
    # -------------------------
    # Load data
    data = load.dataset_epicimpoc_susceptibility(nrows=10000)

    # Filter required columns
    data = data[['antibioticCode',
                 'organismCode',
                 'dateReceived',
                 'sensitivity',
                 'orderCode']]

    # Select specific examples
    #is_cod = data['orderCode']=='URICUL'
    #is_org = data['organismCode']=='ECOL'
    #is_abx = data['antibioticCode'].isin(['ATAZ', 'AMER'])
    #data = data[is_cod & is_abx & is_org]

    # Show
    print("\n\nData input:")
    print(data.head(10))

    # --------------------
    # compute frequencies
    # --------------------
    # Create instance
    freq = Frequency(column_antibiotic='antibioticCode',
                     column_organism='organismCode',
                     column_date='dateReceived',
                     column_outcome='sensitivity')

    # Compute frequencies overall
    freq_overall = freq.compute(data, strategy='overall', 
                                      by_category='pairs')

    # ------------------------
    # compute resistance index
    # ------------------------
    # Compute sari
    sari_overall = SARI(strategy='medium').compute(freq_overall)

    # ------------------------
    # format dataframe
    # ------------------------

    def create_mapper(dataframe, column_key, column_value):
      """This method constructs a mapper

      Parameters
      ----------
      dataframe: dataframe-like
        The dataframe from which the columns are extracted

      column_key: string-like
        The name of the column with the values for the keys of the mapper

      column_value: string-like
        The name of the column with the values for the values of the mapper

      Returns
      -------
      dictionary
      """
      dataframe = dataframe[[column_key, column_value]]
      dataframe = dataframe.drop_duplicates()
      return dict(zip(dataframe[column_key], dataframe[column_value]))

    # Load datasets
    antibiotics = load.dataset_epicimpoc_antibiotics()
    organisms = load.dataset_epicimpoc_organisms()

    # Create mappers
    abx_map = create_mapper(antibiotics, 'antibioticCode', 'antibioticClass')
    org_map = create_mapper(organisms, 'organismCode', 'specieName')

    # Copy dataframe
    dataframe = sari_overall.copy(deep=True)
    dataframe = dataframe.reset_index()

    # Include categories
    dataframe['category'] = dataframe['ANTIBIOTIC'].map(abx_map)
    dataframe['genus'] = dataframe['SPECIE'].map(org_map)

    # Show dataframe
    print("\n\nData antibiogram:")
    print(dataframe.head(10))

    # ------------------------
    # create antibiogram
    # ------------------------
    # Antibiogram plotter
    antibiogram = Antibiogram(column_organism='SPECIE',
                              column_antibiotic='ANTIBIOTIC',
                              column_genus='genus',
                              column_category='category',
                              column_index='sari')

    # Fit antibiogram
    antibiogram = antibiogram.fit(dataframe)

    # ---------
    # Example 1
    # ----------
    antibiogram.plot(genera=['staphylococcus',
                              'klebsiella',
                              'streptococcus',
                              'enterococcus'],
                     method='weighted',
                     metric='euclidean',
                     figsize=(15,8))

    # Show
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.896 seconds)


.. _sphx_glr_download__examples_examples_epicimpoc_plot_epicimpoc_antibiogram.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_epicimpoc_antibiogram.py <plot_epicimpoc_antibiogram.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_epicimpoc_antibiogram.ipynb <plot_epicimpoc_antibiogram.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
