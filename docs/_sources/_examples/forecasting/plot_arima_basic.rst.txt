
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_examples\forecasting\plot_arima_basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__examples_forecasting_plot_arima_basic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__examples_forecasting_plot_arima_basic.py:


ARIMA basic
-----------

.. todo: Explain

.. GENERATED FROM PYTHON SOURCE LINES 8-150



.. image:: /_examples/forecasting/images/sphx_glr_plot_arima_basic_001.png
    :alt: ARIMA non-dynamic, ARIMA dynamic
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Series:
    arima-aic                    784.8803
    arima-bic                    792.0264
    arima-hqic                   787.7454
    arima-llf                   -389.4402
    arima-const_coef             269.8181
    arima-const_std               149.221
    arima-const_tvalue             1.8082
    arima-const_tprob              0.0706
    arima-const_cil              -22.6497
    arima-const_ciu              562.2859
    arima-ar.L1.y_coef             0.9858
    arima-ar.L1.y_std              0.0155
    arima-ar.L1.y_tvalue          63.6169
    arima-ar.L1.y_tprob               0.0
    arima-ar.L1.y_cil              0.9555
    arima-ar.L1.y_ciu              1.0162
    arima-m_dw                     2.0266
    arima-m_jb_value             1044.535
    arima-m_jb_prob                   0.0
    arima-m_skew                  -3.1833
    arima-m_kurtosis              19.5175
    arima-m_nm_value              85.1397
    arima-m_nm_prob                   0.0
    arima-m_ks_value               0.5982
    arima-m_ks_prob                   0.0
    arima-m_shp_value              0.7467
    arima-m_shp_prob                  0.0
    arima-m_ad_value               3.5055
    arima-m_ad_nnorm                False
    arima-converged                  True
    arima-endog             [20.361335...
    arima-order                 (1, 0, 0)
    arima-trend                         c
    arima-disp                          0
    arima-model             <statsmode...
    arima-id                ARIMA(1, 0...
    dtype: object

    Summary:
                                  ARMA Model Results                              
    ==============================================================================
    Dep. Variable:                      y   No. Observations:                   80
    Model:                     ARMA(1, 0)   Log Likelihood                -389.440
    Method:                       css-mle   S.D. of innovations             30.776
    Date:                Wed, 17 Mar 2021   AIC                            784.880
    Time:                        19:31:19   BIC                            792.026
    Sample:                             0   HQIC                           787.745
                                                                              
    ==============================================================================
                     coef    std err          z      P>|z|      [0.025      0.975]
    ------------------------------------------------------------------------------
    const        269.8181    149.221      1.808      0.071     -22.650     562.286
    ar.L1.y        0.9858      0.015     63.617      0.000       0.955       1.016
    ==============================================================================
                                        Manual                                    
    ------------------------------------------------------------------------------
    Omnibus:                        0.000  Durbin-Watson:                    2.027
    Prob(Omnibus):                  0.000  Jarque-Bera (JB):              1044.535
    Skew:                          -3.183  Prob(JB):                         0.000
    Kurtosis_m:                    19.518  Cond No:                 
    Normal (N):                    85.140  Prob(N):                          0.000
    ==============================================================================






|

.. code-block:: default
   :lineno-start: 8

    # Import.
    import sys
    import warnings
    import pandas as pd
    import matplotlib as mpl
    import matplotlib.pyplot as plt

    # Import ARIMA from statsmodels.
    from statsmodels.tsa.arima_model import ARIMA

    # import weights.
    from pyamr.datasets.load import make_timeseries
    from pyamr.core.regression.arima import ARIMAWrapper

    # Filter warnings
    warnings.simplefilter(action='ignore', category=FutureWarning)

    # ----------------------------
    # set basic configuration
    # ----------------------------
    # Matplotlib options
    mpl.rc('legend', fontsize=6)
    mpl.rc('xtick', labelsize=6)
    mpl.rc('ytick', labelsize=6)

    # Set pandas configuration.
    pd.set_option('display.max_colwidth', 14)
    pd.set_option('display.width', 150)
    pd.set_option('display.precision', 4)

    # ----------------------------
    # create data
    # ----------------------------
    # Create timeseries data
    x, y, f = make_timeseries()

    # Create exogenous variable
    exog = x

    # ----------------------------
    # fit the model
    # ----------------------------
    # Create specific arima model.
    arima = ARIMAWrapper(estimator=ARIMA).fit( \
        endog=y[:80], order=(1,0,0), trend='c', disp=0)

    # Print series
    print("\nSeries:")
    print(arima.as_series())

    # Print summary.
    print("\nSummary:")
    print(arima.as_summary())

    # -----------------
    # Save & Load
    # -----------------
    # File location
    #fname = '../../examples/saved/arima-sample.pickle'

    # Save
    #arima.save(fname=fname)

    # Load
    #arima = ARIMAWrapper().load(fname=fname)


    # -----------------
    #  Predict and plot
    # -----------------
    # This example shows how to make predictions using the wrapper which has
    # been previously fitted. It also demonstrateds how to plot the resulting
    # data for visualization purposes. It shows two different types of
    # predictions:
    #    - dynamic predictions in which the prediction is done based on the
    #      previously predicted values. Note that for the case of ARIMA(0,1,1)
    #      it returns a line.
    #    - not dynamic in which the prediction is done based on the real
    #      values of the time series, no matter what the prediction was for
    #      those values.

    # Variables.
    s, e = 50, 120

    # Compute predictions
    preds_1 = arima.get_prediction(start=s, end=e, dynamic=False)
    preds_2 = arima.get_prediction(start=s, end=e, dynamic=True)

    # Create figure
    fig, axes = plt.subplots(1, 2, figsize=(8,3))

    # ----------------
    # Plot non-dynamic
    # ----------------
    # Plot truth values.
    axes[0].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                    markeredgecolor='k', markeredgewidth=0.5,
                    markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[0].plot(preds_1[0,:], preds_1[1,:], color='#FF0000', alpha=1.00, 
                linewidth=2.0, label=arima._identifier())

    # Plot the confidence intervals.
    axes[0].fill_between(preds_1[0,:], preds_1[2,:], 
                                       preds_1[3,:], 
                                       color='#FF0000', 
                                       alpha=0.25)

    # ------------
    # Plot dynamic
    # ------------
    # Plot truth values.
    axes[1].plot(y, color='#A6CEE3', alpha=0.5, marker='o',
                    markeredgecolor='k', markeredgewidth=0.5,
                    markersize=5, linewidth=0.75, label='Observed')

    # Plot forecasted values.
    axes[1].plot(preds_2[0,:], preds_2[1,:], color='#FF0000', alpha=1.00, 
                linewidth=2.0, label=arima._identifier())

    # Plot the confidence intervals.
    axes[1].fill_between(preds_2[0,:], preds_2[2,:], 
                                       preds_2[3,:], 
                                       color='#FF0000', 
                                       alpha=0.25)

    # Configure axes
    axes[0].set_title("ARIMA non-dynamic")
    axes[1].set_title("ARIMA dynamic")

    # Format axes
    axes[0].grid(True, linestyle='--', linewidth=0.25)
    axes[1].grid(True, linestyle='--', linewidth=0.25)

    # Legend 
    axes[0].legend()
    axes[1].legend()

    # Show
    plt.show()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.179 seconds)


.. _sphx_glr_download__examples_forecasting_plot_arima_basic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_arima_basic.py <plot_arima_basic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_arima_basic.ipynb <plot_arima_basic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
